import { LineMerchantConfig } from './line-pay-api/type';
import { LinePayClient } from './type';
import { toConfirmResponse, toRefundResponse } from './handler/payment-details-recovery';
import { HttpError, isHttpError } from './line-pay-api/error/http';
import { LinePayApiError, isLinePayApiError } from './line-pay-api/error/line-pay-api';
import { TimeoutError, isTimeoutError } from './line-pay-api/error/timeout';
/**
 * Create a client for LINE Pay API.
 *
 * @param config Configuration from the LINE Pay for the client
 * @returns LINE Pay client
 */
export declare function createLinePayClient(config: LineMerchantConfig): LinePayClient;
export declare const handler: {
    createPaymentDetailsRecoveryHandler: <T extends "confirm" | "refund">(converter: import("./handler/payment-details-recovery").PaymentDetailsConverter<T>, predicate?: (error: unknown) => boolean) => import("./payment-api/type").ApiHandler<T>;
    createTimeoutRetryHandler: <T_1 extends keyof import("./payment-api/type").LinePayApiClients>(maxRetry?: number, retryTimeout?: number) => import("./payment-api/type").ApiHandler<T_1>;
    toConfirmResponse: typeof toConfirmResponse;
    toRefundResponse: typeof toRefundResponse;
};
export declare const error: {
    HttpError: typeof HttpError;
    isHttpError: typeof isHttpError;
    LinePayApiError: typeof LinePayApiError;
    isLinePayApiError: typeof isLinePayApiError;
    TimeoutError: typeof TimeoutError;
    isTimeoutError: typeof isTimeoutError;
};
