"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.error = exports.handler = exports.createLinePayClient = void 0;
const auth_http_client_1 = require("./line-pay-api/auth-http-client");
const confirm_1 = require("./line-pay-api/confirm");
const refund_1 = require("./line-pay-api/refund");
const request_1 = require("./line-pay-api/request");
const create_1 = require("./payment-api/create");
const payment_details_1 = require("./line-pay-api/payment-details");
const payment_details_recovery_1 = require("./handler/payment-details-recovery");
const timeout_retry_1 = require("./handler/timeout-retry");
const capture_1 = require("./line-pay-api/capture");
const http_1 = require("./line-pay-api/error/http");
const line_pay_api_1 = require("./line-pay-api/error/line-pay-api");
const timeout_1 = require("./line-pay-api/error/timeout");
const check_payment_status_1 = require("./line-pay-api/check-payment-status");
const pay_preapproved_1 = require("./line-pay-api/pay-preapproved");
const check_regkey_1 = require("./line-pay-api/check-regkey");
const expire_regkey_1 = require("./line-pay-api/expire-regkey");
/**
 * Create a client for LINE Pay API.
 *
 * @param config Configuration from the LINE Pay for the client
 * @returns LINE Pay client
 */
function createLinePayClient(config) {
    const httpClient = (0, auth_http_client_1.createAuthHttpClient)(config);
    return {
        request: (0, create_1.createPaymentApi)('request', request_1.requestWithClient, httpClient),
        confirm: (0, create_1.createPaymentApi)('confirm', confirm_1.confirmWithClient, httpClient),
        capture: (0, create_1.createPaymentApi)('capture', capture_1.captureWithClient, httpClient),
        refund: (0, create_1.createPaymentApi)('refund', refund_1.refundWithClient, httpClient),
        paymentDetails: (0, create_1.createPaymentApi)('paymentDetails', payment_details_1.paymentDetailsWithClient, httpClient),
        checkPaymentStatus: (0, create_1.createPaymentApi)('checkPaymentStatus', check_payment_status_1.checkPaymentStatusWithClient, httpClient),
        checkRegKey: (0, create_1.createPaymentApi)('checkRegKey', check_regkey_1.checkRegKeyWithClient, httpClient),
        payPreapproved: (0, create_1.createPaymentApi)('payPreapproved', pay_preapproved_1.payPreapprovedWithClient, httpClient),
        expireRegKey: (0, create_1.createPaymentApi)('expireRegKey', expire_regkey_1.expireRegKeyWithClient, httpClient)
    };
}
exports.createLinePayClient = createLinePayClient;
exports.handler = {
    createPaymentDetailsRecoveryHandler: payment_details_recovery_1.createPaymentDetailsRecoveryHandler,
    createTimeoutRetryHandler: timeout_retry_1.createTimeoutRetryHandler,
    toConfirmResponse: payment_details_recovery_1.toConfirmResponse,
    toRefundResponse: payment_details_recovery_1.toRefundResponse
};
exports.error = {
    HttpError: http_1.HttpError,
    isHttpError: http_1.isHttpError,
    LinePayApiError: line_pay_api_1.LinePayApiError,
    isLinePayApiError: line_pay_api_1.isLinePayApiError,
    TimeoutError: timeout_1.TimeoutError,
    isTimeoutError: timeout_1.isTimeoutError
};
//# sourceMappingURL=index.js.map