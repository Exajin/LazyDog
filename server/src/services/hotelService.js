import pool from "../config/mysql.js";

export const getHotels = async () => {
  const connection = await pool.getConnection();
  try {
    let query = `
      SELECT h.*, 
             hi.url AS main_image_url,
             IFNULL(r.avg_rating, 0) AS avg_rating,
             IFNULL(rbp.min_price, 0) AS min_price
      FROM hotel h
      LEFT JOIN hotel_images hi ON h.main_image_id = hi.id
      LEFT JOIN (
          SELECT hotel_id, ROUND(AVG(rating), 1) AS avg_rating
          FROM hotel_reviews
          GROUP BY hotel_id
      ) r ON h.id = r.hotel_id
      LEFT JOIN (
          SELECT hotel_id, MIN(base_price) AS min_price
          FROM room_base_price 
          WHERE is_deleted = 0
          GROUP BY hotel_id
      ) rbp ON h.id = rbp.hotel_id
      WHERE h.is_deleted = 0 
      GROUP BY h.id
    `;

    console.log(" Âü∑Ë°å SQL Êü•Ë©¢:", query);

    const [hotels] = await connection.query(query);
    return hotels;
  } catch (error) {
    throw new Error("ÁÑ°Ê≥ïÂèñÂæóÈ£ØÂ∫óÂàóË°®Ôºö" + error.message);
  } finally {
    connection.release();
  }
};

export const searchHotels = async (keyword) => {
  try {
    const [hotels] = await pool.execute(
      "SELECT * FROM hotel WHERE (name LIKE ? OR county LIKE ? OR district LIKE ? OR address LIKE ?) AND is_deleted = 0",
      [`%${keyword}%`, `%${keyword}%`, `%${keyword}%`, `%${keyword}%`]
    );
    return hotels;
  } catch (error) {
    throw new Error("ÂèñÂæóÁõ∏ÈóúË≥áÊñôÂ§±Êïó");
  }
};

export const getId = async (id) => {
  try {
    const [hotels] = await pool.query(
      `SELECT h.*, hi.url AS main_image_url
       FROM hotel h
       LEFT JOIN hotel_images hi ON h.main_image_id = hi.id
       WHERE h.id = ? AND h.is_deleted = 0`,
      [id]
    );

    if (hotels.length == 0) {
      throw new Error(`Êâæ‰∏çÂà∞ id=${id} ÁöÑÊóÖÈ§®`);
    }

    return hotels[0];
  } catch (error) {
    throw new Error(`ÁÑ°Ê≥ïÂèñÂæó id=${id} ÊóÖÈ§®: ` + error.message);
  }
};
export const getOperatorTZJ = async (operatorId) => {
  try {
    const [hotels] = await pool.query(
      "SELECT * FROM hotel WHERE operator_id = ?",
      [operatorId]
    );
    return hotels;
  } catch (err) {
    throw new Error(`‰Ω†ÁöÑoperatorId:${operatorId}ÊúâÈåØ`);
  }
};

export const createHotels = async (hotelData) => {
  const connection = await pool.getConnection();
  try {
    await connection.beginTransaction();

    const {
      name,
      link,
      county,
      district,
      address,
      phone,
      room_total,
      introduce,
      latitude,
      longitude,
      map_link,
      check_in_time,
      check_out_time,
      contact_email,
      url,
    } = hotelData;

    console.log("Êî∂Âà∞ÁöÑÂúñÁâá:", url);

    const [hotelResult] = await connection.query(
      `INSERT INTO hotel 
        (name, link, county, district, address, phone, room_total, introduce, latitude, 
         longitude, map_link, check_in_time, check_out_time, contact_email, created_at, updated_at, is_deleted) 
       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW(), 0)`,
      [
        name,
        link,
        county,
        district,
        address,
        phone,
        room_total,
        introduce,
        latitude,
        longitude,
        map_link,
        check_in_time,
        check_out_time,
        contact_email,
      ]
    );

    const hotel_id = hotelResult.insertId;
    let mainImageId = null;

    // image_url
    let imageList = Array.isArray(url)
      ? url
      : typeof url === "string"
      ? [url]
      : [];
    console.log("ÂúñÁâáË¶ÅÂ≠òÂÖ•:", imageList);
    //È†êË®≠ÊòØ‰∏äËàπÁöÑÁ¨¨‰∏ÄÂºµÂúñÁâáÁÇ∫main_image
    if (imageList.length > 0) {
      for (let i = 0; i < imageList.length; i++) {
        const [imageResult] = await connection.query(
          "INSERT INTO hotel_images (hotel_id, url) VALUES (?, ?)",
          [hotel_id, imageList[i]]
        );
        if (i == 0) {
          mainImageId = imageResult.insertId;
        }
      }
    }

    console.log("Ë®≠ÂÆö‰∏ªË¶ÅÂúñÁâá ID:", mainImageId);

    //Êõ¥Êñ∞ main_image_id
    if (mainImageId) {
      await connection.query(
        "UPDATE hotel SET main_image_id = ? WHERE id = ?",
        [mainImageId, hotel_id]
      );
    }

    await connection.commit();
    return {
      id: hotel_id,
      name,
      link,
      county,
      district,
      address,
      phone,
      room_total,
      introduce,
      latitude,
      longitude,
      map_link,
      check_in_time,
      check_out_time,
      contact_email,
      url: imageList,
    };
  } catch (error) {
    await connection.rollback();
    throw new Error("ÁÑ°Ê≥ïÂâµÁ´ãÊóÖÈ§®Ôºö" + error.message);
  } finally {
    connection.release();
  }
};

export const updateHotelById = async (updateData) => {
  try {
    // Ëß£ÊßãË≥¶ÂÄºÊéíÈô§‰∏çÊáâË©≤Êõ¥Êñ∞ÁöÑÊ¨Ñ‰Ωç(ÁõÆÂâçÂØ´Âú®{}Ë£°ÁöÑÊ¨Ñ‰Ωç) ...updateFieldsÂ±ïÈñã ÈÅãÁÆóÂÄºÊòØÂâ©‰∏ãÊ¨Ñ‰Ωç
    //updateFieldsËÆäÊàê‰∏ÄÂÄãÊñ∞ÁöÑÁâ©‰ª∂‰æÜÂ≠òÊîæÂâ©È§òÂèØÊõ¥Êñ∞Ê¨Ñ‰Ωç

    const {
      id,
      created_at,
      average_rating,
      total_reviews,
      main_image_id,
      deleteImageIds = [],
      newImages = [],
      ...updateFields
    } = updateData;

    if (!id) {
      return { error: "Áº∫Â∞ë idÔºåÁÑ°Ê≥ïÊõ¥Êñ∞ÊóÖÈ§®" };
    }

    // Â¶ÇÊûú updateFields ÊòØÁ©∫ÁöÑÔºå‰∏çÊõ¥Êñ∞
    if (
      Object.keys(updateFields).length == 0 &&
      deleteImageIds.length == 0 &&
      newImages.length == 0 &&
      !main_image_id
    ) {
      return { error: "Ê≤íÊúâÊèê‰æõÊõ¥Êñ∞Ê¨Ñ‰ΩçÊàñÊñ∞Â¢ûÂà™Èô§ÂúñÁâá" };
    }

    const connection = await pool.getConnection();
    try {
      await connection.beginTransaction();
      //  ÂãïÊÖãÁîüÊàê SQL **ÈúÄË¶ÅÂÜçÁ†îÁ©∂ **
      if (Object.keys(updateFields).length > 0) {
        const keys = Object.keys(updateFields);
        const values = Object.values(updateFields);
        const set = keys.map((key) => `${key} = ?`).join(", ");
        values.push(id);

        const [result] = await pool.query(
          `UPDATE hotel SET ${set}, updated_at = NOW() WHERE id = ?`,
          values
        );
        if (result.affectedRows == 0) {
          return { error: "Êõ¥Êñ∞Â§±ÊïóÔºåÊâæ‰∏çÂà∞Ë©≤ÊóÖÈ§®" };
        }
      }
      if (deleteImageIds.length > 0) {
        await pool.query(
          `UPDATE hotel_images SET is_deleted = 1, updated_at = NOW() WHERE id IN (${deleteImageIds
            .map(() => "?")
            .join(", ")})`,
          deleteImageIds
        );
      }

      if (newImages.length > 0) {
        const newImageValues = newImages.map(() => "(?, ?, ?)").join(", ");
        const newImageData = newImages.flatMap((img) => [
          id,
          img.url,
          img.description || null,
        ]);
        console.log("Âç≥Â∞áÂ≠òÂÖ•ÁöÑÂúñÁâá:", newImageData);

        await connection.query(
          `INSERT INTO hotel_images (hotel_id, url, description) VALUES ${newImageValues}`,
          newImageData
        );
      }
      //ÈÄôÈÇäÊòØÊèõmain_image_id
      if (main_image_id) {
        const [imageExists] = await connection.query(
          "SELECT id FROM hotel_images WHERE id = ? AND hotel_id = ? AND is_deleted = 0",
          [main_image_id, id]
        );

        if (imageExists.length == 0) {
          throw new Error("ÈÅ∏ÊìáÁöÑ main_image_id ÁÑ°ÊïàÔºåË´ãÈÅ∏ÊìáË©≤È£ØÂ∫óÁöÑÊúâÊïàÂúñÁâá");
        }

        await connection.query(
          "UPDATE hotel SET main_image_id = ?, updated_at = NOW() WHERE id = ?",
          [main_image_id, id]
        );
      }
      await connection.commit();
      return {
        message: `ÊóÖÈ§® id=${id} Êõ¥Êñ∞ÊàêÂäü,${deleteImageIds.length} ÂºµÂúñÁâáÂ∑≤Âà™Èô§Ôºå${newImages.length} ÂºµÂúñÁâáÂ∑≤Êñ∞Â¢û`,
      };
    } catch (error) {
      await connection.rollback();
      return { error: "Êõ¥Êñ∞Â§±ÊïóÔºö" + error.message };
    } finally {
      connection.release();
    }
  } catch (error) {
    return { error: "ÁÑ°Ê≥ïÊõ¥Êñ∞ÊóÖÈ§®Ôºö" + error.message };
  }
};

export const softDeleteHotelById = async (id) => {
  const connection = await pool.getConnection();
  try {
    await connection.beginTransaction();

    const [LiveHotel] = await connection.query(
      "SELECT * FROM hotel WHERE id = ? AND is_deleted = 0",
      [id]
    );

    if (LiveHotel.length == 0) {
      await connection.rollback();
      return { error: `Âà™Èô§Â§±ÊïóÔºåÊâæ‰∏çÂà∞ id=${id} ÊàñË©≤ÊóÖÈ§®Â∑≤Âà™Èô§` };
    }

    // ËªüÂà™Èô§ÊóÖÈ§®
    const [result] = await connection.query(
      "UPDATE hotel SET is_deleted = 1, updated_at = NOW() WHERE id = ?",
      [id]
    );

    const imageResult = await pool.query(
      "UPDATE hotel_images SET is_deleted = 1,updated_at = NOW()  WHERE hotel_id =?",
      [id]
    );

    if (result.affectedRows == 0 && imageResult.affectedRows == 0) {
      await connection.rollback();
      return { error: `ËªüÂà™Èô§Â§±ÊïóÔºåÊâæ‰∏çÂà∞ id=${id}` };
    }

    await connection.commit();
    return { message: `ÊóÖÈ§® id=${id} Â∑≤ÊàêÂäüËªüÂà™Èô§` };
  } catch (error) {
    await connection.rollback();
    return { error: "ÁÑ°Ê≥ïÂà™Èô§ÊóÖÈ§®Ôºö" + error.message };
  } finally {
    connection.release();
  }
};
/**  ÂæûË≥áÊñôÂ∫´Áç≤ÂèñÁØ©ÈÅ∏ÂæåÁöÑÈ£ØÂ∫ó */
export const getFilteredHotelS = async (filters) => {
  const connection = await pool.getConnection();
  try {
    let query = `
      SELECT h.*, 
             hi.url AS main_image_url,
             IFNULL(r.avg_rating, 0) AS avg_rating, 
             IFNULL(rbp.min_price, 0) AS min_price
      FROM hotel h
      LEFT JOIN hotel_images hi ON h.main_image_id = hi.id
      LEFT JOIN (
          SELECT hotel_id, ROUND(AVG(rating), 1) AS avg_rating
          FROM hotel_reviews
          GROUP BY hotel_id
      ) r ON h.id = r.hotel_id
      LEFT JOIN (
          SELECT hotel_id, MIN(base_price) AS min_price
          FROM room_base_price
          WHERE is_deleted = 0
          GROUP BY hotel_id
      ) rbp ON h.id = rbp.hotel_id
      WHERE h.is_deleted = 0
    `;

    let queryParams = [];

    // üîπ ÂãïÊÖãÊñ∞Â¢ûÁØ©ÈÅ∏Ê¢ù‰ª∂
    if (filters.min_price !== null) {
      query += ` AND IFNULL(rbp.min_price, 0) >= ?`;
      queryParams.push(filters.min_price);
    }
    if (filters.max_price !== null) {
      query += ` AND IFNULL(rbp.min_price, 0) <= ?`;
      queryParams.push(filters.max_price);
    }
    if (filters.min_rating !== null) {
      query += ` AND IFNULL(r.avg_rating, 0) >= ?`;
      queryParams.push(filters.min_rating);
    }
    if (filters.room_type_id !== null) {
      query += ` AND EXISTS (
        SELECT 1 FROM room_base_price WHERE room_type_id = ? AND hotel_id = h.id
      )`;
      queryParams.push(filters.room_type_id);
    }
    if (filters.tags && filters.tags.length > 0) {
      query += ` AND h.id IN (
        SELECT hotel_id FROM hotel_tags WHERE tag_id IN (${filters.tags.map(() => "?").join(", ")})
      )`;
      queryParams.push(...filters.tags);
    }

    query += " GROUP BY h.id";




    const [hotels] = await connection.query(query, queryParams);
    return hotels;
  } catch (error) {
    throw new Error("ÁÑ°Ê≥ïÂèñÂæóÁØ©ÈÅ∏È£ØÂ∫óÔºö" + error.message);
  } finally {
    connection.release();
  }
};
